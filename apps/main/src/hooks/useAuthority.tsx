import { getAuthorityList } from "@/api/modules/login";
import { useEffect, useState } from "react";

// 共享权限
const SHARE = ['20', '27', '28', '29', '34', '2001', '2002', '2003', '2004', '999', '997', '10006', '710'];
// 演示
const DEMO = [
  '65',
  '66',
  '67',
  '68',
  '69',
  '70',
  '71',
  '72',
  '73',
  '74',
  '75',
  '76',
  '77',
  '78',
  '96',
  '97',
  '98',
  '99',
  '106',
  '107',
  '108',
  '109',
  '110',
];
// 临床演示
const CLINIDEMO = ['79', '80', '81', '82', '83'];

// 医院平台版
const HOSLINKPLATFORM = [
  '37',
  '38',
  '39',
  '40',
  '45',
  '51',
  '15',
  '16',
  '17',
  '19',
  '30',
  '185',
  '32',
  '41',
  '43',
  '46',
  '13',
  '42',
  '7',
  '8',
  '10',
  '338',
  '11',
  '184',
  '31',
  '33',
  '36',
  '3',
  '4',
  '9',
  '47',
  '20',
  '21',
  '18',
  '23',
  '24',
  '25',
  '26',
  '35',
  '50',
  '53',
  '60',
  '27',
  '28',
  '29',
  '34',
  '1',
  '48',
  '49',
  '22',
  '113',
  '112',
  '251',
  '345',
  '10001',
  "10002",
  "10003",
  "10004",
  "10005"
].concat(SHARE);

// 医院标准版
const HOSLINKSTANDARD = [
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7',
  '8',
  '9',
  '10',
  '338',
  '11',
  '184',
  '12',
  '13',
  '14',
  '15',
  '16',
  '17',
  '18',
  '19',
  '21',
  '23',
  '24',
  '25',
  '26',
  '30',
  '185',
  '32',
  '33',
  '35',
  '36',
  '37',
  '38',
  '39',
  '40',
  '41',
  '42',
  '43',
  '45',
  '46',
  '47',
  '48',
  '49',
  '50',
  '51',
  '52',
  '53',
  '54',
  '55',
  '370',
  '56',
  '57',
  '58',
  '59',
  '60',
  '61',
  '62',
  '63',
  '64',
  '22',
  '84',
  '85',
  '86',
  '87',
  '88',
  '89',
  '90',
  '91',
  '92',
  '93',
  '94',
  '95',
  '100',
  '101',
  '102',
  '103',
  '104',
  '105',
  '111',
  '112',
  '113',
  '114',
  '115',
  '117',
  '118',
  '119',
  '120',
  '121',
  '122',
  '123',
  '124',
  '125',
  '126',
  '127',
  '128',
  '129',
  '31',
  '130',
  '341',
  '342',
  '131',
  '132',
  '133',
  '134',
  '135',
  '136',
  '137',
  '138',
  '139',
  '140',
  '141',
  '142',
  '143',
  '144',
  '145',
  '146',
  '147',
  '148',
  '149',
  '150',
  '151',
  '152',
  '153',
  '191',
  '154',
  '155',
  '156',
  '157',
  // '158',
  '159',
  '160',
  '161',
  '162',
  '164',
  '165',
  '166',
  '167',
  '168',
  '169',
  '170',
  '171',
  '172',
  '174',
  '175',
  '176',
  '177',
  '178',
  '179',
  '180',
  '181',
  '182',
  '183',
  '186',
  '331',
  '332',
  '333',
  '334',
  '251',
  '335',
  '345',
  '361',
  '362',
  '363',
  '351',
  '352',
  '353',
  '354',
  '227',
  '228',
  '343',
  '229',
  '239',
  '350',
  '998',
  '10001',
  "10002",
  "10003",
  "10004",
  "10005",
  '65',
  '66',
  '67',
  '68',
  '69',
  '70',
  '71',
  '72',
  '73',
  '74',
  '75',
  '76',
  '77',
  '78',
  '96',
  '97',
  '98',
  '99',
  '106',
  '711',
  '712',
  '21001',
  '21002',
  '20010',
  '20011',
  '20013',
  '20014',
  '20015',
  '20016',
  '20017',
  '20018',
  '50010',
  '50020',
  '20019',
  '20020',
  '20021',
].concat(SHARE, DEMO, CLINIDEMO);
// 展示去掉快速发血    31

// todo 医院权限细分  ['输血科功能','临床科室功能']
// 输血科功能
const BLOODTR = [
  '13',
  '14',
  '15',
  '16',
  '17',
  '19',
  '30',
  '185',
  '32',
  '41',
  '43',
  '46',
  '37',
  '38',
  '39',
  '40',
  '45',
  '51',
  '48',
  '2',
  '7',
  '8',
  '10',
  '338',
  '11',
  '184',
  '33',
  '36',
  '42',
  '49',
  '3',
  '4',
  '5',
  '6',
  '9',
  '47',
  '20',
  '21',
  '18',
  '23',
  '24',
  '25',
  '26',
  '35',
  '50',
  '53',
  '60',
  '27',
  '28',
  '29',
  '34',
  '12',
  '1',
  '22',
  '84',
  '85',
  '86',
  '87',
  '88',
  '89',
  '90',
  '91',
  '92',
  '93',
  '94',
  '95',
  '100',
  '101',
  '102',
  '103',
  '104',
  '105',
  '111',
  '112',
  '113',
  '114',
  '115',
  '117',
  '118',
  '119',
  '120',
  '121',
  '122',
  '123',
  '124',
  '172',
  '331',
  '332',
  '333',
  '251',
  '335'
].concat(DEMO);
// 展示去掉快速发血    31

// 临床科室功能
const CLINICALD = [
  '54',
  '370',
  '57',
  '59',
  '62',
  '64',
  '52',
  '56',
  '58',
  '61',
  '63',
  '12',
  '1',
  '140',
].concat(CLINIDEMO);

// 血站端标准版
const STASTANDARD = [
  '299',
  '200',
  '201',
  '202',
  '240',
  '241',
  '203',
  '204',
  '205',
  '206',
  '207',
  '994',
  '996',
  '995',
  '208',
  '209',
  '210',
  '211',
  '212',
  '213',
  '217',
  '218',
  '219',
  '220',
  '221',
  '227',
  '228',
  '343',
  '229',
  '239',
  '350',
  '998',
  '230',
  '231',
  '232',
  '233',
  '234',
  '235',
  '236',
  '237',
  '238',
  '163',
  '173',
  '243',
  '244',
  '245',
  '246',
  '247',
  '242',
  '2006',
  '248',
  '249',
  '250',
  '2005',
  '340',
  '601',
  '602',
  '603',
  '2018',
  '2019',
  '2020',
  '2021',
  '2022',
  '2023',
  '2024',
  '253',
  '21003',
  '21004',
  '30010',
  '30011',
  '30012',
  '30013',
  '30014',
  '30015',
  '30016',
  '30017',
  '30018',
  '40010',
].concat(SHARE);

// 监管平台标准版
const SUPSTANDARD = [
  '300',
  '301',
  '302',
  '303',
  '304',
  '305',
  '306',
  '307',
  '309',
  '310',
  '312',
  '313',
  '314',
  '315',
  '316',
  '317',
  '318',
  '319',
  '320',
  '321',
  '322',
  '326',
  '327',
  '399',
  '251',
  '340',
  '227',
  '228',
  '343',
  '229',
  '239',
  '350',
  '998',
  '242',
  '243',
  '2005',
  '250',
  '21',
  '23',
  '25',
  '22',
  '345',
  '137',
  '24',
  '138',
  '156',
  '26',
  '18',
  '35',
  '50',
  '53',
  '60',
  '122',
  '123',
  '150',
].concat(SHARE);

// no path
const NoPath = [
  '1',
  '48',
  '119',
  '49',
  '84',
  '111',
  '112',
  '113',
  '114',
  '115',
  '12',
  '37',
  '79',
  '299',
  '200',
  '203',
  '206',
  '209',
  '2018',
  '2022',
  '212',
  '219',
  '227',
  '399',
  '300',
  '307',
  '314',
  '319',
  '20',
  '21',
  '27',
  '130',
  '143',
  '251',
  "10001",
  "10002",
  "10003",
  "10004",
  "10005",
];
function useAuthority() {
  const [authority, setAuthority] = useState<any>([])

  const getAuthorityData = async () => {
    const { data } = await getAuthorityList();
    setAuthority(data)
  }
  const getAuthorityByType = (type: 'D' | 'E' | 'F' | 'G' | 'EB' | 'EC' | 'ALL' | 'NoPath'): Array<any> => {
    switch (type) {
      case 'D':
        return authority.filter(d => HOSLINKPLATFORM.indexOf(d.id) !== -1);
      case 'E':
        return authority.filter(d => HOSLINKSTANDARD.indexOf(d.id) !== -1);
      case 'F':
        return authority.filter(d => STASTANDARD.indexOf(d.id) !== -1);
      case 'G':
        return authority.filter(d => SUPSTANDARD.indexOf(d.id) !== -1);
      case 'EB':
        return authority.filter(
          d =>
            HOSLINKSTANDARD.indexOf(d.id) !== -1 &&
            BLOODTR.indexOf(d.id) !== -1,
        );
      case 'EC':
        return authority.filter(
          d =>
            HOSLINKSTANDARD.indexOf(d.id) !== -1 &&
            CLINICALD.indexOf(d.id) !== -1,
        );
      case 'ALL':
        return authority;
      default:
        return [];
    }
  }
  useEffect(() => {
    getAuthorityData()
  }, [])

    
  return {
    authority,
    getAuthorityByType
  }
}
export default useAuthority